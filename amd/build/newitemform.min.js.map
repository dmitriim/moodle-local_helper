{"version":3,"sources":["../src/newitemform.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","newItemForm","selector","contextid","init","prototype","modal","triggers","get_string","then","create","type","types","SAVE_CANCEL","title","body","bind","setBody","getBody","setTitle","setLarge","getRoot","on","hidden","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"AASAA,OAAM,4BAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,oBAAvB,CAA6C,mBAA7C,CAAkE,eAAlE,CAAmF,WAAnF,CAAgG,UAAhG,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAAiBC,CAAjB,CAA+BC,CAA/B,CAA4CC,CAA5C,CAAsDC,CAAtD,CAA4DC,CAA5D,CAA+D,CAU3D,GAAIC,CAAAA,CAAW,CAAG,SAASC,CAAT,CAAmBC,CAAnB,CAA8B,CAC5C,KAAKA,SAAL,CAAiBA,CAAjB,CACA,KAAKC,IAAL,CAAUF,CAAV,CACH,CAHD,CASAD,CAAW,CAACI,SAAZ,CAAsBC,KAAtB,CAA8B,IAA9B,CAMAL,CAAW,CAACI,SAAZ,CAAsBF,SAAtB,CAAkC,CAAC,CAAnC,CASAF,CAAW,CAACI,SAAZ,CAAsBD,IAAtB,CAA6B,SAASF,CAAT,CAAmB,CAC5C,GAAIK,CAAAA,CAAQ,CAAGb,CAAC,CAACQ,CAAD,CAAhB,CAEA,MAAOP,CAAAA,CAAG,CAACa,UAAJ,CAAe,aAAf,CAA8B,YAA9B,EAA4CC,IAA5C,CAAiD,UAAW,CAE/D,MAAOb,CAAAA,CAAY,CAACc,MAAb,CAAoB,CACvBC,IAAI,CAAEf,CAAY,CAACgB,KAAb,CAAmBC,WADF,CAEvBC,KAAK,CAAE,EAFgB,CAGvBC,IAAI,CAAE,EAHiB,CAApB,CAIJR,CAJI,CAKV,CAPuD,CAOtDS,IAPsD,CAOjD,IAPiD,CAAjD,EAOOP,IAPP,CAOY,SAASH,CAAT,CAAgB,CAE/B,KAAKA,KAAL,CAAaA,CAAb,CAEA,KAAKA,KAAL,CAAWW,OAAX,CAAmB,KAAKC,OAAL,EAAnB,EACA,KAAKZ,KAAL,CAAWa,QAAX,CAAoB,cAApB,EAGA,KAAKb,KAAL,CAAWc,QAAX,GAGA,KAAKd,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwBzB,CAAW,CAAC0B,MAApC,CAA4C,UAAW,CACnD,KAAKjB,KAAL,CAAWW,OAAX,CAAmB,KAAKC,OAAL,EAAnB,CACH,CAF2C,CAE1CF,IAF0C,CAErC,IAFqC,CAA5C,EAKA,KAAKV,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwBzB,CAAW,CAAC2B,KAApC,CAA2C,UAAW,CAClD,KAAKlB,KAAL,CAAWe,OAAX,GAAqBI,MAArB,CAA4B,uEAA5B,CACH,CAF0C,CAEzCT,IAFyC,CAEpC,IAFoC,CAA3C,EAOA,KAAKV,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwBzB,CAAW,CAAC6B,IAApC,CAA0C,KAAKC,UAAL,CAAgBX,IAAhB,CAAqB,IAArB,CAA1C,EAEA,KAAKV,KAAL,CAAWe,OAAX,GAAqBC,EAArB,CAAwB,QAAxB,CAAkC,MAAlC,CAA0C,KAAKM,cAAL,CAAoBZ,IAApB,CAAyB,IAAzB,CAA1C,EAEA,MAAO,MAAKV,KACf,CA5BkB,CA4BjBU,IA5BiB,CA4BZ,IA5BY,CAPZ,CAoCV,CAvCD,CA8CAf,CAAW,CAACI,SAAZ,CAAsBa,OAAtB,CAAgC,SAASW,CAAT,CAAmB,CAC/C,GAAwB,WAApB,QAAOA,CAAAA,CAAX,CAAqC,CACjCA,CAAQ,CAAG,EACd,CAED,GAAIC,CAAAA,CAAM,CAAG,CAACC,YAAY,CAAEC,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAf,CAAb,CACA,MAAO/B,CAAAA,CAAQ,CAACoC,YAAT,CAAsB,cAAtB,CAAsC,WAAtC,CAAmD,KAAK/B,SAAxD,CAAmE2B,CAAnE,CACV,CAPD,CAcA7B,CAAW,CAACI,SAAZ,CAAsB8B,4BAAtB,CAAqD,UAAW,CAC5D,KAAK7B,KAAL,CAAW8B,IAAX,GAGApC,CAAC,CAACqC,GAAF,CAAM,+BAAN,CAAuC,UAAW,CAC9CC,CAAC,CAACC,sBAAF,CAAyBC,sBAAzB,EACH,CAFD,EAGAC,QAAQ,CAACC,QAAT,CAAkBC,MAAlB,EACH,CARD,CAeA1C,CAAW,CAACI,SAAZ,CAAsBuC,2BAAtB,CAAoD,SAASC,CAAT,CAAe,CAG/D,KAAKvC,KAAL,CAAWW,OAAX,CAAmB,KAAKC,OAAL,CAAa2B,CAAb,CAAnB,CACH,CAJD,CAaA5C,CAAW,CAACI,SAAZ,CAAsBuB,cAAtB,CAAuC,SAASkB,CAAT,CAAY,CAE/CA,CAAC,CAACC,cAAF,GAEA,GAAIC,CAAAA,CAAW,CAAGP,QAAQ,CAACQ,WAAT,CAAqB,YAArB,CAAlB,CACAD,CAAW,CAACE,SAAZ,CAAsB,QAAtB,QAMA,KAAK5C,KAAL,CAAWe,OAAX,GAAqB8B,IAArB,CAA0B,QAA1B,EAAoCC,IAApC,CAAyC,SAASC,CAAT,CAAgBC,CAAhB,CAAyB,CAC9DA,CAAO,CAACC,aAAR,CAAsBP,CAAtB,CACH,CAFD,EAKA,GAAIQ,CAAAA,CAAO,CAAG9D,CAAC,CAAC+D,KAAF,CACV,KAAKnD,KAAL,CAAWe,OAAX,GAAqB8B,IAArB,CAA0B,yBAA1B,CADU,CAEV,KAAK7C,KAAL,CAAWe,OAAX,GAAqB8B,IAArB,CAA0B,QAA1B,CAFU,CAAd,CAMA,GAAIK,CAAO,CAACE,MAAZ,CAAoB,CAChBF,CAAO,CAACG,KAAR,GAAgBC,KAAhB,GACA,MACH,CAGD,GAAIC,CAAAA,CAAQ,CAAG,KAAKvD,KAAL,CAAWe,OAAX,GAAqB8B,IAArB,CAA0B,MAA1B,EAAkCW,SAAlC,EAAf,CAGA/D,CAAI,CAACgE,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,qCADL,CAEPC,IAAI,CAAE,CAAC9D,SAAS,CAAE,KAAKA,SAAjB,CAA4B4B,YAAY,CAAEC,IAAI,CAACC,SAAL,CAAe4B,CAAf,CAA1C,CAFC,CAGPK,IAAI,CAAE,KAAK/B,4BAAL,CAAkCnB,IAAlC,CAAuC,IAAvC,CAA6C6C,CAA7C,CAHC,CAIPM,IAAI,CAAE,KAAKvB,2BAAL,CAAiC5B,IAAjC,CAAsC,IAAtC,CAA4C6C,CAA5C,CAJC,CAAD,CAAV,CAMH,CArCD,CA8CA5D,CAAW,CAACI,SAAZ,CAAsBsB,UAAtB,CAAmC,SAASmB,CAAT,CAAY,CAC3CA,CAAC,CAACC,cAAF,GACA,KAAKzC,KAAL,CAAWe,OAAX,GAAqB8B,IAArB,CAA0B,MAA1B,EAAkCiB,MAAlC,EACH,CAHD,CAKA,MAAgD,CAU5ChE,IAAI,CAAE,cAASF,CAAT,CAAmBC,CAAnB,CAA8B,CAChC,MAAO,IAAIF,CAAAA,CAAJ,CAAgBC,CAAhB,CAA0BC,CAA1B,CACV,CAZ2C,CAcnD,CA5LC,CAAN","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_helper/newitemform\n * @class      newItemForm\n * @package    core_group\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var newItemForm = function(selector, contextid) {\n            this.contextid = contextid;\n            this.init(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        newItemForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        newItemForm.prototype.contextid = -1;\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        newItemForm.prototype.init = function(selector) {\n            var triggers = $(selector);\n            // Fetch the title string.\n            return Str.get_string('creategroup', 'core_group').then(function() {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: '',\n                    body: '',\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                this.modal.setBody(this.getBody());\n                this.modal.setTitle('Wiki Example');\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        newItemForm.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n            return Fragment.loadFragment('local_helper', 'item_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        newItemForm.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n            document.location.reload();\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        newItemForm.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        newItemForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'core_group_submit_create_group_form',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        newItemForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:core_group/newgroup */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function(selector, contextid) {\n                return new newItemForm(selector, contextid);\n            }\n        };\n    });"],"file":"newitemform.min.js"}